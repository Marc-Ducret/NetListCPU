ACCESSING THE BUILD SCRIPTS

Building scripts are located under: "MasterBuilder".
If any permission issues with scripts are encountered, run:
	chmod u+x execPerm; ./execPerm
in this folder.

USING THE SCRIPTS

-> buildTools 
	builds all the static tools (namely: EZSimulator, TongCompiler, SimulatorEnv, and ACompiler)

usage: ./buildTools	

-> buildProc [file]
	Takes a .mj file (without the extension) and compiles the associated net list, c code and finally executable (proc.exe)
	The file must be located in the src folder
	
usage: ./buildProc main

-> build [file]
	runs buildTools then buildProc
	The file must be located in the src folder
	
usage: ./build main

-> run [file] [width] [height] <-console> <-debug>
	compiles the specified Tong source file (without .tong) into rom then runs the processor on this rom.
	Uses width and height as screen sizes.
	The file must be located in the src folder.
	-console uses the console as screen
	-debug displays the error stream from the processor
	
usage: ./run prgm 32 16
	   ./run prgm 32 16 -console -debug

-> runAss [file] [width] [height] <-console> <-debug>
	compiles the specified assembly source file into rom then runs the processor on this rom.
	Uses width and height as screen sizes.
	The file must be located in the src/Assembleur folder.
	-console uses the console as screen
	-debug displays the error stream from the processor
	
usage: ./run prgm 32 16
	   ./run prgm 32 16 -console -debug
  
PROGRAMMING IN TONG

Simple loop exemple:

	.vars x
	.prgm
	@ main
		x = 0;
		! x < 0x10000 {
			x = x + 1;
		}
		>exit;

Syntax:
	* Programs must start with the .vars section where all variables must be enumerated.
	* The .prgm section must follow.
	* This sections contains procedure definitions starting with "@ [procedure_name]" followed by a list of instructions.
	* One of the procedures must be called "main".
	* Comments start with "#"
	
Instructions:
	* Updating variables: 	"[var] = <expression>;"
	* Procedure call:		">[procedure_name];"
	* Native call:			">[native_name] <expression> <expression>....;
		exemple: >draw 5 'A';
	* Flow control:
		If:					"? <expression> { # executed if <expression> != 0
								<instruction> 
								<instruction>
								....
							} { # executed if <expression> = 0
								<instruction> 
								<instruction>
								....
							}
							
		While:				"! <expression> { # executed while <expression> != 0
								<instruction> 
								<instruction>
								....
							}
							
Natives:
	* Exit: ">exit;" stops the program
		Warning: the simulator might not close after exit if not in console mode to leave time for the user to look at the screen
	* Draw: ">draw <x> <y> <char>;" draws char at (x, y) on the screen (doesn't update it)
		Warning: currently y paramater has no effect
	* Redraw: ">redraw;" updates the screen with the drawn characters

Expressions:
	* All variales and expression represent integers.
	* Variables:			"[var]"
	* Constants:			"<integer>", "'<character>'"
		exemple: 42, 0x42, '$'
	* Arithmetic:			"<expression> <operator> <expression>"
		Warning: strange associativity x-y+z = x-(y+z)  (subject to change)
		Warning: intermediate results are stored with registers, if there isn't enough of them, compilation will fail
	
Operators:
	* Add: "+"
	* Sub: "-"
	* Lsl: "*"
	* Lsr: "/"
	* Lt : "<"
	* Le : "<="
	* And: "&"
	* Or : "|"
	* Eq : "="
	* Neq: "!="

PROGRAMMING IN ASSEMBLY:
Use the assembly syntax, with all the operations implemented :
add n1 n2 (numbers of the registers)
sub n1 n2
lsl n1 n2
lsr n1 n2
...
beq imm n1 n2
...

'\n' signals the end of an instruction, and don't leave any blank line, especially at the end of the file.
You can use '#' to comment.

Put your assembly file (without any extension) in MasterBuilder/src/Assembleur.

