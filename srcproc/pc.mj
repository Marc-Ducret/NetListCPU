
mux_n<n>(c,a:[n],b:[n]) = (o:[n]) where
   if n = 0 then o = [] else
   o = mux(c,a[0],b[0]) . mux_n<n-1>(c,a[1..n-1],b[1..n-1]) end if
end where

fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

add<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = c_in
  else
    (s_n1, c_n1) = add<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if
end where

reg_n<n>(p:[n]) = (o:[n]) where (*TOOPT*)
   if n = 0 then o = [] else
   o = reg(p[0]) . reg_n<n-1>(p[1..n-1]) end if
end where

pc(j,a:[32]) = (pc:[17]) where   
   (x,froude) = add<17>(pc,0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1,0);
   new = mux_n<17>(j,a[15..31],x);
   pc = reg_n<17>(new);
end where

main() = (p:[17],o:[32]) where

   p = pc(0,0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0);
   o = ram<17,32>(p,0,0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0,0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0);

end where


