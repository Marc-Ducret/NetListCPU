
(*Fonctions générales*)
zero2() = (o:[2]) where
  o = 0.0;
end where;

zero4() = (o:[4]) where
  o = 0.0.0.0;
end where;

zero8() = (o:[8]) where
  o = 0.0.0.0.0.0.0.0;
end where;

zero16() = (o:[16]) where
  o = 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
end where;

zero32() = (o:[32]) where
  o = 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
end where;

xorCond(a:[32],cond) = (o:[32]) where
o = (a[0] ^ cond) . (a[1] ^ cond) . (a[2] ^ cond) . (a[3] ^ cond) . (a[4] ^ cond) . (a[5] ^ cond) . (a[6] ^ cond) . (a[7] ^ cond) . (a[8] ^ cond) . (a[9] ^ cond) . (a[10] ^ cond) . (a[11] ^ cond) . (a[12] ^ cond) . (a[13] ^ cond) . (a[14] ^ cond) . (a[15] ^ cond) . (a[16] ^ cond) . (a[17] ^ cond) . (a[18] ^ cond) . (a[19] ^ cond) . (a[20] ^ cond) . (a[21] ^ cond) . (a[22] ^ cond) . (a[23] ^ cond) . (a[24] ^ cond) . (a[25] ^ cond) . (a[26] ^ cond) . (a[27] ^ cond) . (a[28] ^ cond) . (a[29] ^ cond) . (a[30] ^ cond) . (a[31] ^ cond)
end where

orTot32(a:[32]) = (o) where
  r_16_0 = a[0] + a[1];
  r_16_1 = a[2] + a[3];
  r_16_2 = a[4] + a[5];
  r_16_3 = a[6] + a[7];
  r_16_4 = a[8] + a[9];
  r_16_5 = a[10] + a[11];
  r_16_6 = a[12] + a[13];
  r_16_7 = a[14] + a[15];
  r_16_8 = a[16] + a[17];
  r_16_9 = a[18] + a[19];
  r_16_10 = a[20] + a[21];
  r_16_11 = a[22] + a[23];
  r_16_12 = a[24] + a[25];
  r_16_13 = a[26] + a[27];
  r_16_14 = a[28] + a[29];
  r_16_15 = a[30] + a[31];
  r_8_0 = r_16_0 + r_16_1;
  r_8_1 = r_16_2 + r_16_3;
  r_8_2 = r_16_4 + r_16_5;
  r_8_3 = r_16_6 + r_16_7;
  r_8_4 = r_16_8 + r_16_9;
  r_8_5 = r_16_10 + r_16_11;
  r_8_6 = r_16_12 + r_16_13;
  r_8_7 = r_16_14 + r_16_15;
  r_4_0 = r_8_0 + r_8_1;
  r_4_1 = r_8_2 + r_8_3;
  r_4_2 = r_8_4 + r_8_5;
  r_4_3 = r_8_6 + r_8_7;
  r_2_0 = r_4_0 + r_4_1;
  r_2_1 = r_4_2 + r_4_3;
  o = r_2_0 + r_2_1;
end where

not_32(a:[32]) = (o:[32]) where
  o = (not a[0]) . (not a[1]) . (not a[2]) . (not a[3]) . (not a[4]) . (not a[5]) . (not a[6]) . (not a[7]) . (not a[8]) . (not a[9]) . (not a[10]) . (not a[11]) . (not a[12]) . (not a[13]) . (not a[14]) . (not a[15]) . (not a[16]) . (not a[17]) . (not a[18]) . (not a[19]) . (not a[20]) . (not a[21]) . (not a[22]) . (not a[23]) . (not a[24]) . (not a[25]) . (not a[26]) . (not a[27]) . (not a[28]) . (not a[29]) . (not a[30]) . (not a[31]);
end where

reg_17(p:[17]) = (o:[17]) where
  o = reg(p[0]) . reg(p[1]) . reg(p[2]) . reg(p[3]) . reg(p[4]) . reg(p[5]) . reg(p[6]) . reg(p[7]) . reg(p[8]) . reg(p[9]) . reg(p[10]) . reg(p[11]) . reg(p[12]) . reg(p[13]) . reg(p[14]) . reg(p[15]) . reg(p[16]);
end where

filtre32(r:[32],cond) = (o:[32]) where
  o = (r[0] & cond) . (r[1] & cond) . (r[2] & cond) . (r[3] & cond) . (r[4] & cond) . (r[5] & cond) . (r[6] & cond) . (r[7] & cond) . (r[8] & cond) . (r[9] & cond) . (r[10] & cond) . (r[11] & cond) . (r[12] & cond) . (r[13] & cond) . (r[14] & cond) . (r[15] & cond) . (r[16] & cond) . (r[17] & cond) . (r[18] & cond) . (r[19] & cond) . (r[20] & cond) . (r[21] & cond) . (r[22] & cond) . (r[23] & cond) . (r[24] & cond) . (r[25] & cond) . (r[26] & cond) . (r[27] & cond) . (r[28] & cond) . (r[29] & cond) . (r[30] & cond) . (r[31] & cond);
end where

or_32(r1:[32],r2:[32]) = (o:[32]) where
  o = (r1[0] + r2[0]) . (r1[1] + r2[1]) . (r1[2] + r2[2]) . (r1[3] + r2[3]) . (r1[4] + r2[4]) . (r1[5] + r2[5]) . (r1[6] + r2[6]) . (r1[7] + r2[7]) . (r1[8] + r2[8]) . (r1[9] + r2[9]) . (r1[10] + r2[10]) . (r1[11] + r2[11]) . (r1[12] + r2[12]) . (r1[13] + r2[13]) . (r1[14] + r2[14]) . (r1[15] + r2[15]) . (r1[16] + r2[16]) . (r1[17] + r2[17]) . (r1[18] + r2[18]) . (r1[19] + r2[19]) . (r1[20] + r2[20]) . (r1[21] + r2[21]) . (r1[22] + r2[22]) . (r1[23] + r2[23]) . (r1[24] + r2[24]) . (r1[25] + r2[25]) . (r1[26] + r2[26]) . (r1[27] + r2[27]) . (r1[28] + r2[28]) . (r1[29] + r2[29]) . (r1[30] + r2[30]) . (r1[31] + r2[31]);
end where

and_32(r1:[32],r2:[32]) = (o:[32]) where
  o = (r1[0] & r2[0]) . (r1[1] & r2[1]) . (r1[2] & r2[2]) . (r1[3] & r2[3]) . (r1[4] & r2[4]) . (r1[5] & r2[5]) . (r1[6] & r2[6]) . (r1[7] & r2[7]) . (r1[8] & r2[8]) . (r1[9] & r2[9]) . (r1[10] & r2[10]) . (r1[11] & r2[11]) . (r1[12] & r2[12]) . (r1[13] & r2[13]) . (r1[14] & r2[14]) . (r1[15] & r2[15]) . (r1[16] & r2[16]) . (r1[17] & r2[17]) . (r1[18] & r2[18]) . (r1[19] & r2[19]) . (r1[20] & r2[20]) . (r1[21] & r2[21]) . (r1[22] & r2[22]) . (r1[23] & r2[23]) . (r1[24] & r2[24]) . (r1[25] & r2[25]) . (r1[26] & r2[26]) . (r1[27] & r2[27]) . (r1[28] & r2[28]) . (r1[29] & r2[29]) . (r1[30] & r2[30]) . (r1[31] & r2[31])
end where

xor_32(r1:[32],r2:[32]) = (o:[32]) where
  o = (r1[0] ^ r2[0]) . (r1[1] ^ r2[1]) . (r1[2] ^ r2[2]) . (r1[3] ^ r2[3]) . (r1[4] ^ r2[4]) . (r1[5] ^ r2[5]) . (r1[6] ^ r2[6]) . (r1[7] ^ r2[7]) . (r1[8] ^ r2[8]) . (r1[9] ^ r2[9]) . (r1[10] ^ r2[10]) . (r1[11] ^ r2[11]) . (r1[12] ^ r2[12]) . (r1[13] ^ r2[13]) . (r1[14] ^ r2[14]) . (r1[15] ^ r2[15]) . (r1[16] ^ r2[16]) . (r1[17] ^ r2[17]) . (r1[18] ^ r2[18]) . (r1[19] ^ r2[19]) . (r1[20] ^ r2[20]) . (r1[21] ^ r2[21]) . (r1[22] ^ r2[22]) . (r1[23] ^ r2[23]) . (r1[24] ^ r2[24]) . (r1[25] ^ r2[25]) . (r1[26] ^ r2[26]) . (r1[27] ^ r2[27]) . (r1[28] ^ r2[28]) . (r1[29] ^ r2[29]) . (r1[30] ^ r2[30]) . (r1[31] ^ r2[31])
end where

mux_32(cond,r1:[32],r2:[32]) = (o:[32]) where
  o = mux(cond, r1[0], r2[0]) . mux(cond, r1[1], r2[1]) . mux(cond, r1[2], r2[2]) . mux(cond, r1[3], r2[3]) . mux(cond, r1[4], r2[4]) . mux(cond, r1[5], r2[5]) . mux(cond, r1[6], r2[6]) . mux(cond, r1[7], r2[7]) . mux(cond, r1[8], r2[8]) . mux(cond, r1[9], r2[9]) . mux(cond, r1[10], r2[10]) . mux(cond, r1[11], r2[11]) . mux(cond, r1[12], r2[12]) . mux(cond, r1[13], r2[13]) . mux(cond, r1[14], r2[14]) . mux(cond, r1[15], r2[15]) . mux(cond, r1[16], r2[16]) . mux(cond, r1[17], r2[17]) . mux(cond, r1[18], r2[18]) . mux(cond, r1[19], r2[19]) . mux(cond, r1[20], r2[20]) . mux(cond, r1[21], r2[21]) . mux(cond, r1[22], r2[22]) . mux(cond, r1[23], r2[23]) . mux(cond, r1[24], r2[24]) . mux(cond, r1[25], r2[25]) . mux(cond, r1[26], r2[26]) . mux(cond, r1[27], r2[27]) . mux(cond, r1[28], r2[28]) . mux(cond, r1[29], r2[29]) . mux(cond, r1[30], r2[30]) . mux(cond, r1[31], r2[31])
end where

mux_17(cond,r1:[17],r2:[17]) = (o:[17]) where
  o = mux(cond, r1[0], r2[0]) . mux(cond, r1[1], r2[1]) . mux(cond, r1[2], r2[2]) . mux(cond, r1[3], r2[3]) . mux(cond, r1[4], r2[4]) . mux(cond, r1[5], r2[5]) . mux(cond, r1[6], r2[6]) . mux(cond, r1[7], r2[7]) . mux(cond, r1[8], r2[8]) . mux(cond, r1[9], r2[9]) . mux(cond, r1[10], r2[10]) . mux(cond, r1[11], r2[11]) . mux(cond, r1[12], r2[12]) . mux(cond, r1[13], r2[13]) . mux(cond, r1[14], r2[14]) . mux(cond, r1[15], r2[15]) . mux(cond, r1[16], r2[16])
end where


(*ALU*)


(* complément à deux, poids fort (signe) en 0, poids faible à droite (indice n-1) *)



fulladder(a,b,c) = (s, r) where
  s = (a ^ b) ^ c;
  r = (a & b) + ((a ^ b) & c);
end where

add<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
  if n = 0 then
    o = [];
    c_out = c_in
  else
    (s_n1, c_n1) = add<n-1>(a[1..], b[1..], c_in);
    (s_n, c_out) = fulladder(a[0], b[0], c_n1);
    o = s_n . s_n1
  end if
end where


sub32(a:[32], b:[32]) = (o:[32]) where
  (o, osef) = add<32>(a, not_32(b), 1);
end where


andbit<n>(a, b:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = a and b[0] . andbit<n-1>(a, b[1..])
  end if
end where

mul<n>(a:[n], b:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    (o, osef) = add<n>(andbit<n>(a[n-1], b), mul<n-1>(a[0..n-2], b[1..n-1]) . 0, 0)
  end if
end where


div<n>(a:[n], b:[n]) = (o:[n]) where

  (* GLHF, compilator's job to transform in multiplication? *)
  
  if n = 0 then
    o = []
  else
    o = 0 . div<n-1>(a[1..], b[1..])
  end if
end where

lsl5(a:[32], x:[5]) = (o :[32]) where
  a0 = mux_32(x[0], a[16..31]. zero16(), a);
  a1 = mux_32(x[1], a0[8..31]. zero8(), a0);
  a2 = mux_32(x[2], a1[4..31]. zero4(), a1);
  a3 = mux_32(x[3], a2[2..31]. zero2(), a2);
  o = mux_32(x[4], a3[1..31]. 0, a3);
end where;

lsr5(a:[32], x:[5]) = (o :[32]) where
  a0 = mux_32(x[0], zero16(). a[0..15], a);
  a1 = mux_32(x[1], zero8().a0[0..23], a0);
  a2 = mux_32(x[2], zero4().a1[0..27], a1);
  a3 = mux_32(x[3], zero2().a2[0..29], a2);
  o = mux_32(x[4], 0.a3[0..30], a3);
end where;


alu(addOp,subOp,andOp,orOp,xorOp,compOp,ltOp,eqOp,neqOp, shiftOp, lrOp, a:[32],b:[32]) = (o:[32],zf,of,sf) where
  (c,of) = add<32>(a, xorCond(b,subOp), subOp);
  sf = c[0]; zf = not orTot32(c);
  andRes = and_32(a,b);
  orRes = or_32(a,b);
  xorRes = xor_32(a,b);
  x = ((sf & ltOp) + (zf & eqOp)) ^ neqOp;
  compRes = 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.x;
  rshiftRes = mux_32(orTot32(b[0..26].0.0.0.0.0), zero32(), lsr5(a, b[27..31]));
  lshiftRes = mux_32(orTot32(b[0..26].0.0.0.0.0), zero32(), lsl5(a, b[27..31]));
  o1 = mux_32(addOp,(mux_32(compOp,compRes,c)),mux_32(xorOp,xorRes,mux_32(orOp,orRes,andRes)));
  o = mux_32(shiftOp, mux_32(lrOp, rshiftRes, lshiftRes), o1);
  
end where

(* 32 bits : 00000000000000000000000000000000 *)



(*Registres*)


maj (r:[32], cond, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31) = (s:[32]) where
   (*Update of register r with data d depending on condition cond*)
   s = mux(cond, d0, reg(r[0])) . mux(cond, d1, reg(r[1])) . mux(cond, d2, reg(r[2])) . mux(cond, d3, reg(r[3])) . mux(cond, d4, reg(r[4])) . mux(cond, d5, reg(r[5])) . mux(cond, d6, reg(r[6])) . mux(cond, d7, reg(r[7])) . mux(cond, d8, reg(r[8])) . mux(cond, d9, reg(r[9])) . mux(cond, d10, reg(r[10])) . mux(cond, d11, reg(r[11])) . mux(cond, d12, reg(r[12])) . mux(cond, d13, reg(r[13])) . mux(cond, d14, reg(r[14])) . mux(cond, d15, reg(r[15])) . mux(cond, d16, reg(r[16])) . mux(cond, d17, reg(r[17])) . mux(cond, d18, reg(r[18])) . mux(cond, d19, reg(r[19])) . mux(cond, d20, reg(r[20])) . mux(cond, d21, reg(r[21])) . mux(cond, d22, reg(r[22])) . mux(cond, d23, reg(r[23])) . mux(cond, d24, reg(r[24])) . mux(cond, d25, reg(r[25])) . mux(cond, d26, reg(r[26])) . mux(cond, d27, reg(r[27])) . mux(cond, d28, reg(r[28])) . mux(cond, d29, reg(r[29])) . mux(cond, d30, reg(r[30])) . mux(cond, d31, reg(r[31]));
end where


filtreReg32(r:[32],cond) = (o:[32]) where
  o = (reg(r[0]) & cond) . (reg(r[1]) & cond) . (reg(r[2]) & cond) . (reg(r[3]) & cond) . (reg(r[4]) & cond) . (reg(r[5]) & cond) . (reg(r[6]) & cond) . (reg(r[7]) & cond) . (reg(r[8]) & cond) . (reg(r[9]) & cond) . (reg(r[10]) & cond) . (reg(r[11]) & cond) . (reg(r[12]) & cond) . (reg(r[13]) & cond) . (reg(r[14]) & cond) . (reg(r[15]) & cond) . (reg(r[16]) & cond) . (reg(r[17]) & cond) . (reg(r[18]) & cond) . (reg(r[19]) & cond) . (reg(r[20]) & cond) . (reg(r[21]) & cond) . (reg(r[22]) & cond) . (reg(r[23]) & cond) . (reg(r[24]) & cond) . (reg(r[25]) & cond) . (reg(r[26]) & cond) . (reg(r[27]) & cond) . (reg(r[28]) & cond) . (reg(r[29]) & cond) . (reg(r[30]) & cond) . (reg(r[31]) & cond);
end where


(*Main*)

main() = (pc:[17],o:[32], r1:[32]) where
  
  (*Constantes*)
  zero2 = 0.0;
  zero4 = zero2.zero2;
  zero8 = zero4.zero4;
  zero16 = zero8.zero8;
  zero32 = zero16.zero16;

  (*PC initial*)
  pc = reg_17(newPC);
  
  (*Instruction*)
  o = rom<17,32>(pc);

  imm = o[0]; notImm = not imm;
  weReg = o[1];
  ramOp = o[2];
  weRamOp = o[3]; 
  jzOp = o[4]; 
  jnzOp = o[5];
  branchOp = o[6]; 
  addOp = o[7]; 
  subOp = o[8];
  op9 = o[9]; compOp = op9 & notImm; 
  op10 = o[10]; ltOp = op10 & notImm;
  op11 = o[11]; eqOp = op11 & notImm; 
  op12 = o[12]; negOp = op12 & notImm; 
  op13 = o[13]; shiftOp = op13 & notImm; 
  op14 = o[14]; lrOp = op14 & notImm; 
  op15 = o[15]; movOp = op15 & notImm; 
  op16 = o[16]; orOp = op16 & notImm; 
  op17 = o[17]; xorOp = op17 & notImm; 
  op18 = o[18]; andOp = op18 & notImm;
  op19 = o[19]; 
  op20 = o[20]; 
  op21 = o[21]; 
  op22 = o[22]; 
  op23 = o[23]; 
  op24 = o[24]; 
  op25 = o[25];  

  (*adresses des registres*)
  a0 = o[28]; a1 = o[27]; a2 = o[26]; an0 = not a0; an1 = not a1; an2 = not a2;
  z0 = o[31]; z1 = o[30]; z2 = o[29]; zn0 = not z0; zn1 = not z1; zn2 = not z2;
  
  a01 = a1 & a0; a0n1 = an1 & a0; an01 = a1 & an0; an0n1 = an1 & an0;
  z01 = z1 & z0; z0n1 = zn1 & z0; zn01 = z1 & zn0; zn0n1 = zn1 & zn0;

  a_0 = an0n1 & an2; a_1 = a0n1 & an2; a_2 = an01 & an2; a_3 = a01 & an2; a_4 = an0n1 & a2; a_5 = a0n1 & a2; a_6 = an01 & a2; a_7 = a01 & a2;
  z_0 = zn0n1 & zn2; z_1 = z0n1 & zn2; z_2 = zn01 & zn2; z_3 = z01 & zn2; z_4 = zn0n1 & z2; z_5 = z0n1 & z2; z_6 = zn01 & z2; z_7 = z01 & z2;

  (*lecture des registres*)
  aa_0 = or_32(filtreReg32(r0,a_0),filtreReg32(r1,a_1));
  aa_1 = or_32(filtreReg32(r2,a_2),filtreReg32(r3,a_3));
  aa_2 = or_32(filtreReg32(r4,a_4),filtreReg32(r5,a_5));
  aa_3 = or_32(filtreReg32(r6,a_6),filtreReg32(r7,a_7));
  aa_4 = or_32(aa_0, aa_1);
  aa_5 = or_32(aa_2, aa_3);
  reg1 = or_32(aa_4, aa_5);

  zz_0 = or_32(filtreReg32(r0,z_0),filtreReg32(r1,z_1));
  zz_1 = or_32(filtreReg32(r2,z_2),filtreReg32(r3,z_3));
  zz_2 = or_32(filtreReg32(r4,z_4),filtreReg32(r5,z_5));
  zz_3 = or_32(filtreReg32(r6,z_6),filtreReg32(r7,z_7));
  zz_4 = or_32(zz_0, zz_1);
  zz_5 = or_32(zz_2, zz_3);
  reg2 = or_32(zz_4, zz_5);

  (*Exécution de l'alu*)
  (dataAlu,zf,of,sf) = alu(addOp,subOp,andOp,orOp,xorOp,compOp,ltOp,eqOp,negOp,shiftOp, lrOp, reg1,reg2);
  
  dataComputed = mux_32(movOp, reg2, dataAlu);
  (*Récupération des données*)
  dImm0 = notImm & dataComputed[0];
  dImm1 = notImm & dataComputed[1];
  dImm2 = notImm & dataComputed[2];
  dImm3 = notImm & dataComputed[3];
  dImm4 = notImm & dataComputed[4];
  dImm5 = notImm & dataComputed[5];
  dImm6 = notImm & dataComputed[6];
  dImm7 = notImm & dataComputed[7];
  dImm8 = notImm & dataComputed[8];
  dImm9 = notImm & dataComputed[9];
  dImm10 = notImm & dataComputed[10];
  dImm11 = notImm & dataComputed[11];
  dImm12 = notImm & dataComputed[12];
  dImm13 = notImm & dataComputed[13];
  dImm14 = notImm & dataComputed[14];
  dImm15 = mux(imm,op9,dataComputed[15]);
  dImm16 = mux(imm,op10,dataComputed[16]);
  dImm17 = mux(imm,op11,dataComputed[17]);
  dImm18 = mux(imm,op12,dataComputed[18]);
  dImm19 = mux(imm,op13,dataComputed[19]);
  dImm20 = mux(imm,op14,dataComputed[20]);
  dImm21 = mux(imm,op15,dataComputed[21]);
  dImm22 = mux(imm,op16,dataComputed[22]);
  dImm23 = mux(imm,op17,dataComputed[23]);
  dImm24 = mux(imm,op18,dataComputed[24]);
  dImm25 = mux(imm,op19,dataComputed[25]);
  dImm26 = mux(imm,op20,dataComputed[26]);
  dImm27 = mux(imm,op21,dataComputed[27]);
  dImm28 = mux(imm,op22,dataComputed[28]);
  dImm29 = mux(imm,op23,dataComputed[29]);
  dImm30 = mux(imm,op24,dataComputed[30]);
  dImm31 = mux(imm,op25,dataComputed[31]);
  
  dataImm = dImm0.dImm1.dImm2.dImm3.dImm4.dImm5.dImm6.dImm7.dImm8.dImm9.dImm10.dImm11.dImm12.
            dImm13.dImm14.dImm15.dImm16.dImm17.dImm18.dImm19.dImm20.dImm21.dImm22.
            dImm23.dImm24.dImm25.dImm26.dImm27.dImm28.dImm29.dImm30.dImm31;
  
  (*Appel de la RAM*)
  ra = dImm15.dImm16.dImm17.dImm18.dImm19.dImm20.dImm21.dImm22.
       dImm23.dImm24.dImm25.dImm26.dImm27.dImm28.dImm29.dImm30.dImm31;
  wa = ra;
  dataRamIn = reg1;
  weRam = ramOp and weRamOp;
  dataRamOut = ram<17,32>(ra,weRam,wa,dataRamIn);

  (* Selection de la data *)
  dataReg = mux_32(ramOp, dataRamOut, dataImm);
  
  (* On passe a des fils *)
  d0 = dataReg[0];
  d1 = dataReg[1];
  d2 = dataReg[2];
  d3 = dataReg[3];
  d4 = dataReg[4];
  d5 = dataReg[5];
  d6 = dataReg[6];
  d7 = dataReg[7];
  d8 = dataReg[8];
  d9 = dataReg[9];
  d10 = dataReg[10];
  d11 = dataReg[11];
  d12 = dataReg[12];
  d13 = dataReg[13];
  d14 = dataReg[14];
  d15 = dataReg[15];
  d16 = dataReg[16];
  d17 = dataReg[17];
  d18 = dataReg[18];
  d19 = dataReg[19];
  d20 = dataReg[20];
  d21 = dataReg[21];
  d22 = dataReg[22];
  d23 = dataReg[23];
  d24 = dataReg[24];
  d25 = dataReg[25];
  d26 = dataReg[26];
  d27 = dataReg[27];
  d28 = dataReg[28];
  d29 = dataReg[29];
  d30 = dataReg[30];
  d31 = dataReg[31];

  (*Mise à jour des registres*)
  r0 = maj(r0, a_0 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r1 = maj(r1, a_1 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r2 = maj(r2, a_2 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r3 = maj(r3, a_3 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r4 = maj(r4, a_4 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r5 = maj(r5, a_5 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r6 = maj(r6, a_6 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  r7 = maj(r7, a_7 & weReg, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31);
  
  flagJump = mux(branchOp, zf, reg zf);
  jump = (flagJump & jzOp) + ((not flagJump) & jnzOp); 
  (addPC,osef) = add<17>(pc,zero16.1,0);
  addr = d15.d16.d17.d18.d19.d20.d21.d22.d23.d24.d25.d26.d27.d28.d29.d30.d31;
  newPC = mux_17(jump,addr,addPC);
  
end where


