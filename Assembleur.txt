Architecture du MIPS :
mots de 32 bits, ..

NB : '¬' = " <- "
Jeu d'instructions du MIPS :

move r1, r2 	r1 ¬ r2
add r1, r2, o 	r1 ¬ o + r2
sub r1, r2, o 	r1 ¬ r2 - o
mul r1, r2, o 	r1 ¬ r2 × o
div r1, r2, o 	r1 ¬ r2 ÷ o
and r1, r2, o 	r1 ¬ r2 land o
or r1, r2, o 	r1 ¬ r2 lor o
xor r1, r2, o 	r1 ¬ r2 lxor o
sll r1, r2, o 	r1 ¬ r2 lsl o
srl r1, r2, o 	r1 ¬ r2 lsr o
li r1, n 	r1 ¬ n (i = immediat -> constante dans le programme !)
la r1, a 	r1 ¬ a (load address ?)

lw r1, o (r2) 	r1 ¬ tas.(r2 + o)
sw r1, o (r2) 	r1 ® tas.(r2 + o)
slt r1, r2, o 	r1 ¬ r2 < o "set on less than"
sle r1, r2, o 	r1 ¬ r2 £ o "set on less or equal"
seq r1, r2, o 	r1 ¬ r2 = o "set on equal"
sne r1, r2, o 	r1 ¬ r2 ¹ o "set on non equal"
j o 	pc ¬ o  (saut inconditionnel)
jal o 	ra ¬ pc+1 Ù pc ¬ o "jump and link" (?)
beq r, o, a 	pc¬ a si r = o "branch on equal" (saut conditionnel)
bne r, o, a 	pc¬ a si r ¹ o "branch on non equal" (saut conditionnel)
syscall 	appel système -> fait des opérations selon les valeurs de vo et .. (print_int, print_string, ..)
nop 	ne fait rien



Celles qu'on devra garder (d'après moi) ((c'est à dire toutes, en fait)):
Opérations arithmético-logiques :
add r1, r2, o 	r1 ¬ o + r2
sub r1, r2, o 	r1 ¬ r2 - o
mul r1, r2, o 	r1 ¬ r2 × o
div r1, r2, o 	r1 ¬ r2 ÷ o
sll r1, r2, o 	r1 ¬ r2 lsl o
srl r1, r2, o 	r1 ¬ r2 lsr o

and r1, r2, o 	r1 ¬ r2 land o
or r1, r2, o 	r1 ¬ r2 lor o
xor r1, r2, o 	r1 ¬ r2 lxor o

slt r1, r2, o 	r1 ¬ r2 < o "set on less than"
sle r1, r2, o 	r1 ¬ r2 £ o "set on less or equal"
seq r1, r2, o 	r1 ¬ r2 = o "set on equal"
sne r1, r2, o 	r1 ¬ r2 ¹ o "set on non equal"

Opérations de manipulations de données :
move r1, r2 	r1 ¬ r2
lw r1, o (r2) 	r1 ¬ tas.(r2 + o)
sw r1, o (r2) 	r1 ® tas.(r2 + o)

Opérations de contrôle de l'exécution
j o 	pc ¬ o  (saut inconditionnel)
beq r, o, a 	pc¬ a si r = o "branch on equal" (saut conditionnel)
nop 	ne fait rien

Opérations qu'il pourrait être utile de rajouter :
mod 
mod24
mod60
add24 (addition modulo 24)
add60

32 bits pourquoi ?
Parce que le Japon.
On pourra utiliser des entiers signés seulement, des couleurs, des ascii 27 bits.

Mémoire : 
 - si 256*256 pixels et couleurs 32 bits : 256 Ko pour l'écran
 - 512 Ko
 - + ROM pour initialiser le microprocesseur ?
 - + ROM qui contient la montre digitale (de taille qu'on veut)
 - Taille des mots : 32 bits (4 octets) i.e. taille d'une instruction
 - 32 registres (5 bits) : 3*5 bits pour 3 registres et 17 bits pour l'opcode
 
 L'horloge stockée dans la RAM quelque part (on voudra stocker aussi les constantes 0, 24, 60, 30?, 365? dans les registres) en format nombre de secondes depuis une référence fixe. Pour l'affichage : un bit pour dire mode pixels ou mode LCD
Pour les entrées (changement de mode ou changement d'heure), on pourrait écrire à des endroits spécifiques dans la RAM.





Opcodes :

0 : load_immediate (bits de 9 à 25 indiquent la constante, 26 à 28 registre)
1 : jump
2 : write_register
3 : add
4 : sub
5 : and
6 : or
7 : xor
8 : comp
9 : less than
... (inutilisés pour l'instant)
26 à 28 : registre 1 (qui contiendra le résultat)
29 à 31 : registre 2


RAM(read_address[17], write_enable, write_address[17], data[32])
